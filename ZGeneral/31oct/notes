import cv2
import os
import numpy as np
from pathlib import Path

# Input and output paths
image_folder = "images"
label_folder = "labels"
os.makedirs(label_folder, exist_ok=True)

for image_name in os.listdir(image_folder):
    if not image_name.endswith((".png", ".jpg", ".jpeg")):
        continue
    
    img_path = os.path.join(image_folder, image_name)
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    
    # 1Ô∏è‚É£ Simple threshold (adjust threshold value)
    _, mask = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY)
    
    # 2Ô∏è‚É£ Find contours
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    h, w = img.shape
    txt_path = os.path.join(label_folder, Path(image_name).stem + ".txt")
    
    with open(txt_path, "w") as f:
        for cnt in contours:
            if len(cnt) < 5:  # skip tiny noise
                continue
            # Normalize coordinates
            norm = []
            for point in cnt:
                x, y = point[0]
                norm.append(f"{x / w:.6f} {y / h:.6f}")
            f.write(f"0 {' '.join(norm)}\n")




gggggggggddddddddddddddddddddddddddddddddddggggggggggggggggggggggggggggggggg



üß© Step 1 ‚Äî Understand what YOLO expects for segmentation

Each .txt label file (same name as the image) contains polygons describing the object masks:

<class_id> x1 y1 x2 y2 x3 y3 ... xn yn


Where:

class_id = 0 (since you have one class),

x, y = normalized coordinates (values between 0‚Äì1),

(x1, y1)...(xn, yn) = polygon around the object.

Example:

0 0.12 0.15 0.25 0.20 0.27 0.35 0.15 0.30

üß≠ Step 2 ‚Äî Choose your labeling approach

You have two main options:

üßç‚Äç‚ôÇÔ∏è Option A ‚Äî Manual Labeling (Recommended for small datasets)

Use LabelMe
 or Roboflow Annotate
.

‚úÖ Steps for LabelMe (Offline):

Install:

pip install labelme


Run the label tool:

labelme path/to/images --labels class.txt


(Make a class.txt file containing your single class name, e.g. object)

Draw polygons for the region of interest in each image.

Save the annotations ‚Äî LabelMe will produce .json files.

Convert them to YOLO segmentation format:

pip install labelme2yolo
labelme2yolo path/to/jsons --labels class.txt --output path/to/output


This automatically creates YOLO-style labels/ folder with .txt masks.

‚öôÔ∏è Option B ‚Äî Automatic Labeling (for grayscale or simple shapes)

If your object can be segmented using image thresholding or edge detection, you can generate masks automatically.

Example using OpenCV:
